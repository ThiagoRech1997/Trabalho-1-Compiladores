/* Generated By:JJTree&JavaCC: Do not edit this line. BeerCompiler.java */
package parser;

import recovery.*;
import view.JanelaDoCompilador;
import archives.CreateFile;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.FileWriter;
import java.io.FileWriter;
import javax.swing.JFileChooser;

//graphviz : biblioteca para visualização de grafico
// explicar as mudancas na linguagem.

public class BeerCompiler/*@bgen(jjtree)*/implements BeerCompilerTreeConstants, BeerCompilerConstants {/*@bgen(jjtree)*/
  protected static JJTBeerCompilerState jjtree = new JJTBeerCompilerState();final static JanelaDoCompilador janela = new JanelaDoCompilador();
  static int linha;

  public static void main(String args []) throws ParseException
  {
        //Inicia a tela
        janela.setVisible(true);

        janela.getCompilar().addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
                janela.erros.clear();
                janela.setVazioConsoleMsg();

                if((janela.getTextArquivo().getText().equals(janela.getCampoTexto())) != true)
        {
          janela.setControleArquivo(false);
        }


        if(janela.getControleArquivo() || janela.getTextArquivo().getText().equals(" ") )
        {
                        inicia();
                }else
                {
                        if(janela.getTextArquivo().getText().equals(""))
            {
                JOptionPane.showMessageDialog (null, "A geladeira esta vazia (Arquivo vazio) ", "Arquivo", JOptionPane.WARNING_MESSAGE);
            }else{
              int resp = JOptionPane.showConfirmDialog(null, "Botar gelar meu patr\u00e3o? (Salvar altera\u00e7\u00f5es?)");

                  if(resp == 0)
                  {
                    //Salvar um novo arquivo se ele n existir
                    if(janela.getFile() == null)
                    {
                        janela.salvarComo();
                                        inicia();

                    }else //Se o arquivo ja existir salvar nele
                    {
                        janela.salvar();
                                        inicia();
                    }
                  }
                }
                }
          }
        });
  }

// funcao que le o arquivo e inicia a compilacao
static void inicia(){
  FileReader arql = null;

  try {
        arql = new FileReader(janela.getFile());

  } catch (FileNotFoundException e2) {

        e2.printStackTrace();
  }

  BufferedReader arq = new BufferedReader(arql);

  try {
        BeerCompiler parser = new BeerCompiler(arq);

  }catch (Exception e1){

        BeerCompiler.ReInit(arq);

  }catch (Error e1) {

        BeerCompiler.ReInit(arq);
  }

  try {
    SimpleNode n = BeerCompiler.Start();
        n.dump("", janela);

        }catch (Exception e1){

        }catch (Error e1) {
        }
}

  static public String im(int x)
  {
    int k;
        String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\u005c"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
           {}
   return s;
  }

  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
                         ParseException e,
                         String met) throws ParseEOFException,
                                            ParseException
  {
    eof=false;
        Token tok;

        janela.setConsole("*** " + met + " ***");
        janela.setConsole("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto é null, propaga a exceção 

        tok = getToken(1); // pega token corrente
        while ( ! eof ) { // se não chegou ao fim do arquivo
          if ( g.contains(tok.kind)) {//achou um token no conjunto
            janela.setConsole("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                               im(tok.kind));
            break;
          }
          janela.setConsole("     Ignorando o token: " + im(tok.kind));
          getNextToken();     // pega próximo token       
      tok = getToken(1);
          if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
              eof = true;
        }
    if ( tok != lastError)  {
      janela.MarcaLinhaErro(linha);
          janela.setConsole(e.getMessage());
          lastError = tok;

        }
        if ( eof )
          throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

/* Substituido pelas duas funcoes abaixo:
SimpleNode main():
{ RecoverySet sync= Follow.main; }
{
  try { 
  inicioPrograma() inicioBloco()
  
    (comandos())*
  
  fimBloco() fimPrograma()

  } catch(ParseException e) {
    consumeUntil(sync,e,"main");
  }
  {return jjtThis; }
}
*/
  static final public SimpleNode Start() throws ParseException {
    trace_call("Start");
    try {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        main();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Start");
    }
  }

  static final public int main() throws ParseException {
    trace_call("main");
    try {
 /*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet g = Follow.main;
      try {
        try {
          inicioPrograma();
          inicioBloco();
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEIRO:
            case REAL:
            case BOOLEAN:
            case CHAR:
            case STRING:
            case IF:
            case FOR:
            case WHILE:
            case FUNC:
            case ID:
              ;
              break;
            default:
              jj_la1[0] = jj_gen;
              break label_1;
            }
            comandos();
          }
          fimBloco();
          fimPrograma();
        } catch (ParseException e) {
    consumeUntil(g, e, "main");
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return 0;}
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("main");
    }
  }

  static final public void comandos() throws ParseException {
    trace_call("comandos");
    try {
 /*@bgen(jjtree) comandos */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMANDOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.comandos;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEIRO:
          case REAL:
          case BOOLEAN:
          case CHAR:
          case STRING:
            declaracaoVariavel();
            break;
          case IF:
            condicional();
            break;
          case FOR:
          case WHILE:
            repeticao();
            break;
          case FUNC:
            funcao();
            break;
          case ID:
            operacao();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
    consumeUntil(sync,e,"comandos");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("comandos");
    }
  }

  static final public void condicional() throws ParseException {
    trace_call("condicional");
    try {
 /*@bgen(jjtree) condicional */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.condicional;
      try {
        try {
          condicionalIf();
          paresq();
          expressao();
          pardir();
          inicioBloco();
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEIRO:
            case REAL:
            case BOOLEAN:
            case CHAR:
            case STRING:
            case IF:
            case FOR:
            case WHILE:
            case FUNC:
            case ID:
              ;
              break;
            default:
              jj_la1[2] = jj_gen;
              break label_2;
            }
            comandos();
          }
          fimBloco();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            condicionalElse();
            inicioBloco();
            label_3:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INTEIRO:
              case REAL:
              case BOOLEAN:
              case CHAR:
              case STRING:
              case IF:
              case FOR:
              case WHILE:
              case FUNC:
              case ID:
                ;
                break;
              default:
                jj_la1[3] = jj_gen;
                break label_3;
              }
              comandos();
            }
            fimBloco();
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
        } catch (ParseException e) {
    consumeUntil(sync,e,"condicional");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("condicional");
    }
  }

  static final public void repeticao() throws ParseException {
    trace_call("repeticao");
    try {
 /*@bgen(jjtree) repeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.repeticao;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
            repFor();
            paresq();
            id();
            label_4:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ATRIBUICAO:
                ;
                break;
              default:
                jj_la1[5] = jj_gen;
                break label_4;
              }
              atribuicao();
              digito();
              label_5:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case DIGITO:
                  ;
                  break;
                default:
                  jj_la1[6] = jj_gen;
                  break label_5;
                }
                digito();
              }
            }
            pontoVirgula();
            id();
            operadorLogico();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              id();
              break;
            case DIGITO:
              digito();
              label_6:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case DIGITO:
                  ;
                  break;
                default:
                  jj_la1[7] = jj_gen;
                  break label_6;
                }
                digito();
              }
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            pontoVirgula();
            id();
            atribuicao();
            id();
            operadorAritmetico();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              id();
              break;
            case DIGITO:
              digito();
              label_7:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case DIGITO:
                  ;
                  break;
                default:
                  jj_la1[9] = jj_gen;
                  break label_7;
                }
                digito();
              }
              break;
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            pardir();
            inicioBloco();
            label_8:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INTEIRO:
              case REAL:
              case BOOLEAN:
              case CHAR:
              case STRING:
              case IF:
              case FOR:
              case WHILE:
              case FUNC:
              case ID:
                ;
                break;
              default:
                jj_la1[11] = jj_gen;
                break label_8;
              }
              comandos();
            }
            fimBloco();
            break;
          case WHILE:
            repWhile();
            paresq();
            expressao();
            pardir();
            inicioBloco();
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INTEIRO:
              case REAL:
              case BOOLEAN:
              case CHAR:
              case STRING:
              case IF:
              case FOR:
              case WHILE:
              case FUNC:
              case ID:
                ;
                break;
              default:
                jj_la1[12] = jj_gen;
                break label_9;
              }
              comandos();
            }
            fimBloco();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
    consumeUntil(sync,e,"repeticao");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("repeticao");
    }
  }

  static final public void funcao() throws ParseException {
    trace_call("funcao");
    try {
 /*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.funcao;
      try {
        try {
          func();
          paresq();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            id();
            break;
          case ISTRING:
          case VERDADEIRO:
          case FALSO:
          case DIGITO:
            dado();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_10:
          while (true) {
            separador();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              id();
              break;
            case ISTRING:
            case VERDADEIRO:
            case FALSO:
            case DIGITO:
              dado();
              break;
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEPARADOR:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_10;
            }
          }
          pardir();
          pontoVirgula();
        } catch (ParseException e) {
    consumeUntil(sync,e,"funcao");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("funcao");
    }
  }

  static final public void operacao() throws ParseException {
    trace_call("operacao");
    try {
 /*@bgen(jjtree) operacao */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.operacao;
      try {
        try {
          id();
          atribuicao();
          expressao();
          pontoVirgula();
        } catch (ParseException e) {
    consumeUntil(sync,e,"operacao");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("operacao");
    }
  }

  static final public void expressao() throws ParseException {
    trace_call("expressao");
    try {
 /*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.expressao;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ISTRING:
          case VERDADEIRO:
          case FALSO:
          case ID:
          case DIGITO:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              id();
              break;
            case ISTRING:
            case VERDADEIRO:
            case FALSO:
            case DIGITO:
              dado();
              break;
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_11:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case OPERADOR_ARITMETICO:
              case OPERADOR_LOGICO:
                ;
                break;
              default:
                jj_la1[18] = jj_gen;
                break label_11;
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case OPERADOR_LOGICO:
                operadorLogico();
                break;
              case OPERADOR_ARITMETICO:
                operadorAritmetico();
                break;
              default:
                jj_la1[19] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ID:
                id();
                break;
              case ISTRING:
              case VERDADEIRO:
              case FALSO:
              case DIGITO:
                dado();
                break;
              default:
                jj_la1[20] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
          case PARESQ:
            paresq();
            expressao();
            pardir();
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
    consumeUntil(sync,e,"expressao");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("expressao");
    }
  }

  static final public void declaracaoVariavel() throws ParseException {
    trace_call("declaracaoVariavel");
    try {
 /*@bgen(jjtree) declaracaoVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.declaracaoVariavel;
      try {
        try {
          tipoDado();
          id();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATRIBUICAO:
            atribuicao();
            dado();
            break;
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEPARADOR:
              ;
              break;
            default:
              jj_la1[23] = jj_gen;
              break label_12;
            }
            separador();
            atribuicao();
            dado();
          }
          pontoVirgula();
        } catch (ParseException e) {
    consumeUntil(sync,e,"declaracaoVariavel");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("declaracaoVariavel");
    }
  }

  static final public void tipoDado() throws ParseException {
    trace_call("tipoDado");
    try {
 /*@bgen(jjtree) tipoDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.tipoDado;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEIRO:
            tipoInteiro();
            break;
          case REAL:
            tipoReal();
            break;
          case CHAR:
            tipoChar();
            break;
          case STRING:
            tipoString();
            break;
          case BOOLEAN:
            tipoBooleano();
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
    consumeUntil(sync,e,"tipoDado");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("tipoDado");
    }
  }

  static final public void dado() throws ParseException {
    trace_call("dado");
    try {
 /*@bgen(jjtree) dado */
  SimpleNode jjtn000 = new SimpleNode(JJTDADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.dado;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIGITO:
            numero();
            break;
          case ISTRING:
            string();
            break;
          case VERDADEIRO:
          case FALSO:
            booleano();
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
    consumeUntil(sync,e,"dado");
        }
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    } finally {
      trace_return("dado");
    }
  }

  static final public void numero() throws ParseException {
    trace_call("numero");
    try {
 /*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.numero;
      try {
        try {
          label_13:
          while (true) {
            digito();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DIGITO:
              ;
              break;
            default:
              jj_la1[26] = jj_gen;
              break label_13;
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CASADECIMAL:
            casaDecimal();
            label_14:
            while (true) {
              digito();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DIGITO:
                ;
                break;
              default:
                jj_la1[27] = jj_gen;
                break label_14;
              }
            }
            break;
          default:
            jj_la1[28] = jj_gen;
            ;
          }
        } catch (ParseException e) {
    consumeUntil(sync,e,"numero");
        }
      } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("numero");
    }
  }

  static final public void string() throws ParseException {
    trace_call("string");
    try {
 /*@bgen(jjtree) string */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.string;
      try {
        try {
          istring();
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DIGITO:
            case CARACTERE:
              ;
              break;
            default:
              jj_la1[29] = jj_gen;
              break label_15;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CARACTERE:
              caractere();
              break;
            case DIGITO:
              digito();
              break;
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          istring();
        } catch (ParseException e) {
    consumeUntil(sync,e,"string");
        }
      } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("string");
    }
  }

  static final public void booleano() throws ParseException {
    trace_call("booleano");
    try {
 /*@bgen(jjtree) booleano */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);RecoverySet sync= Follow.booleano;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VERDADEIRO:
            verdadeiro();
            break;
          case FALSO:
            falso();
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
    consumeUntil(sync,e,"booleano");
        }
      } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
      } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
      }
    } finally {
      trace_return("booleano");
    }
  }

  static final public void inicioPrograma() throws ParseException {
    trace_call("inicioPrograma");
    try {
 /*@bgen(jjtree) inicioPrograma */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INICIOPROGRAMA);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("inicioPrograma");
    }
  }

  static final public void fimPrograma() throws ParseException {
    trace_call("fimPrograma");
    try {
 /*@bgen(jjtree) fimPrograma */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FIMPROGRAMA);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("fimPrograma");
    }
  }

  static final public void inicioBloco() throws ParseException {
    trace_call("inicioBloco");
    try {
 /*@bgen(jjtree) inicioBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INICIOBLOCO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("inicioBloco");
    }
  }

  static final public void fimBloco() throws ParseException {
    trace_call("fimBloco");
    try {
 /*@bgen(jjtree) fimBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FIMBLOCO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("fimBloco");
    }
  }

  static final public void pontoVirgula() throws ParseException {
    trace_call("pontoVirgula");
    try {
 /*@bgen(jjtree) pontoVirgula */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTOVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PONTOVIRGULA);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("pontoVirgula");
    }
  }

  static final public void tipoBooleano() throws ParseException {
    trace_call("tipoBooleano");
    try {
 /*@bgen(jjtree) tipoBooleano */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(BOOLEAN);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("tipoBooleano");
    }
  }

  static final public void tipoInteiro() throws ParseException {
    trace_call("tipoInteiro");
    try {
 /*@bgen(jjtree) tipoInteiro */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOINTEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INTEIRO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("tipoInteiro");
    }
  }

  static final public void tipoReal() throws ParseException {
    trace_call("tipoReal");
    try {
 /*@bgen(jjtree) tipoReal */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOREAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(REAL);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("tipoReal");
    }
  }

  static final public void tipoChar() throws ParseException {
    trace_call("tipoChar");
    try {
 /*@bgen(jjtree) tipoChar */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CHAR);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("tipoChar");
    }
  }

  static final public void tipoString() throws ParseException {
    trace_call("tipoString");
    try {
 /*@bgen(jjtree) tipoString */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(STRING);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("tipoString");
    }
  }

  static final public void atribuicao() throws ParseException {
    trace_call("atribuicao");
    try {
 /*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ATRIBUICAO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("atribuicao");
    }
  }

  static final public void separador() throws ParseException {
    trace_call("separador");
    try {
 /*@bgen(jjtree) separador */
  SimpleNode jjtn000 = new SimpleNode(JJTSEPARADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(SEPARADOR);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("separador");
    }
  }

  static final public void condicionalIf() throws ParseException {
    trace_call("condicionalIf");
    try {
 /*@bgen(jjtree) condicionalIf */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONALIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(IF);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("condicionalIf");
    }
  }

  static final public void condicionalElse() throws ParseException {
    trace_call("condicionalElse");
    try {
 /*@bgen(jjtree) condicionalElse */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONALELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ELSE);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("condicionalElse");
    }
  }

  static final public void paresq() throws ParseException {
    trace_call("paresq");
    try {
 /*@bgen(jjtree) paresq */
  SimpleNode jjtn000 = new SimpleNode(JJTPARESQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PARESQ);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("paresq");
    }
  }

  static final public void pardir() throws ParseException {
    trace_call("pardir");
    try {
 /*@bgen(jjtree) pardir */
  SimpleNode jjtn000 = new SimpleNode(JJTPARDIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(PARDIR);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("pardir");
    }
  }

  static final public void istring() throws ParseException {
    trace_call("istring");
    try {
 /*@bgen(jjtree) istring */
  SimpleNode jjtn000 = new SimpleNode(JJTISTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ISTRING);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("istring");
    }
  }

  static final public void casaDecimal() throws ParseException {
    trace_call("casaDecimal");
    try {
 /*@bgen(jjtree) casaDecimal */
  SimpleNode jjtn000 = new SimpleNode(JJTCASADECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CASADECIMAL);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("casaDecimal");
    }
  }

  static final public void operadorAritmetico() throws ParseException {
    trace_call("operadorAritmetico");
    try {
 /*@bgen(jjtree) operadorAritmetico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORARITMETICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(OPERADOR_ARITMETICO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("operadorAritmetico");
    }
  }

  static final public void operadorLogico() throws ParseException {
    trace_call("operadorLogico");
    try {
 /*@bgen(jjtree) operadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(OPERADOR_LOGICO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("operadorLogico");
    }
  }

  static final public void repFor() throws ParseException {
    trace_call("repFor");
    try {
 /*@bgen(jjtree) repFor */
  SimpleNode jjtn000 = new SimpleNode(JJTREPFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FOR);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("repFor");
    }
  }

  static final public void repWhile() throws ParseException {
    trace_call("repWhile");
    try {
 /*@bgen(jjtree) repWhile */
  SimpleNode jjtn000 = new SimpleNode(JJTREPWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(WHILE);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("repWhile");
    }
  }

  static final public void func() throws ParseException {
    trace_call("func");
    try {
 /*@bgen(jjtree) func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FUNC);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("func");
    }
  }

  static final public void verdadeiro() throws ParseException {
    trace_call("verdadeiro");
    try {
 /*@bgen(jjtree) verdadeiro */
  SimpleNode jjtn000 = new SimpleNode(JJTVERDADEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(VERDADEIRO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("verdadeiro");
    }
  }

  static final public void falso() throws ParseException {
    trace_call("falso");
    try {
 /*@bgen(jjtree) falso */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(FALSO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("falso");
    }
  }

  static final public void interrupcao() throws ParseException {
    trace_call("interrupcao");
    try {
 /*@bgen(jjtree) interrupcao */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERRUPCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(INTERRUPCAO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("interrupcao");
    }
  }

  static final public void id() throws ParseException {
    trace_call("id");
    try {
 /*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ID);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("id");
    }
  }

  static final public void digito() throws ParseException {
    trace_call("digito");
    try {
 /*@bgen(jjtree) digito */
  SimpleNode jjtn000 = new SimpleNode(JJTDIGITO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(DIGITO);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("digito");
    }
  }

  static final public void caractere() throws ParseException {
    trace_call("caractere");
    try {
 /*@bgen(jjtree) caractere */
  SimpleNode jjtn000 = new SimpleNode(JJTCARACTERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(CARACTERE);
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("caractere");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BeerCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1a027c00,0x1a027c00,0x1a027c00,0x1a027c00,0x40000,0x8000,0x0,0x0,0x0,0x0,0x0,0x1a027c00,0x1a027c00,0xa000000,0x60100000,0x60100000,0x10000,0x60100000,0x1800000,0x1800000,0x60100000,0x60180000,0x8000,0x10000,0x7c00,0x60100000,0x0,0x0,0x400000,0x0,0x0,0x60000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x1,0x1,0x1,0x0,0x0,0x2,0x2,0x3,0x2,0x3,0x1,0x1,0x0,0x3,0x3,0x0,0x3,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x2,0x2,0x2,0x0,0x6,0x6,0x0,};
   }

  /** Constructor with InputStream. */
  public BeerCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BeerCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BeerCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BeerCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BeerCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BeerCompiler(BeerCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BeerCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
