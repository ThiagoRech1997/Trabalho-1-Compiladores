/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BeerCompiler.jj */
/*@egen*/options
{
  static = true;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(BeerCompiler)
package parser;

import recovery.*;
import view.JanelaDoCompilador;
import archives.CreateFile;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.FileWriter;
import java.io.FileWriter;
import javax.swing.JFileChooser;

//graphviz : biblioteca para visualiza\u00e7\u00e3o de grafico
// explicar as mudancas na linguagem.

public class BeerCompiler/*@bgen(jjtree)*/implements BeerCompilerTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTBeerCompilerState jjtree = new JJTBeerCompilerState();

/*@egen*/
  final static JanelaDoCompilador janela = new JanelaDoCompilador();
  static int linha;
  
  public static void main(String args []) throws ParseException
  {
	//Inicia a tela
	janela.setVisible(true);
	
	janela.getCompilar().addActionListener(new ActionListener() {
	public void actionPerformed(ActionEvent e) {
		janela.erros.clear();
		janela.setVazioConsoleMsg();

		if((janela.getTextArquivo().getText().equals(janela.getCampoTexto())) != true)
        {
          janela.setControleArquivo(false);
        }


        if(janela.getControleArquivo() || janela.getTextArquivo().getText().equals(" ") )
        {				
			inicia();
   		}else
		{
			if(janela.getTextArquivo().getText().equals(""))
            {
                JOptionPane.showMessageDialog (null, "A geladeira esta vazia (Arquivo vazio) ", "Arquivo", JOptionPane.WARNING_MESSAGE);
            }else{
              int resp = JOptionPane.showConfirmDialog(null, "Botar gelar meu patr\u00e3o? (Salvar altera\u00e7\u00f5es?)");
              
          	  if(resp == 0)
          	  {
          	    //Salvar um novo arquivo se ele n existir
          	    if(janela.getFile() == null)
          	    {
          	     	janela.salvarComo();
					inicia();
					
          	    }else //Se o arquivo ja existir salvar nele
          	    {
          	      	janela.salvar();
					inicia();
          	    }
          	  }
          	}
		}
   	  }
	});
  }

// funcao que le o arquivo e inicia a compilacao
static void inicia(){
  FileReader arql = null;
    
  try {
	arql = new FileReader(janela.getFile());
	
  } catch (FileNotFoundException e2) {

	e2.printStackTrace();
  }
  
  BufferedReader arq = new BufferedReader(arql);

  try {
	BeerCompiler parser = new BeerCompiler(arq);

  }catch (Exception e1){ 

	BeerCompiler.ReInit(arq);

  }catch (Error e1) { 

   	BeerCompiler.ReInit(arq);
  }
   
  try {
    SimpleNode n = BeerCompiler.Start();
   	n.dump("", janela);

	}catch (Exception e1){

	}catch (Error e1) {
	}
}
  
  static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static Token lastError = null;
  static boolean eof;    // vari\u00e1vel que indica se EOF foi alcan\u00e7ado
	
  // o m\u00e9todo abaixo consome tokens at\u00e9 alcan\u00e7ar um que perten\u00e7a ao conjunto
  // de sincroniza\u00e7\u00e3o
  static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met) throws ParseEOFException, 
	                                    ParseException
  {
    eof=false;
	Token tok;

	janela.setConsole("*** " + met + " ***");
	janela.setConsole("     Conjunto de sincroniza\u00e7\u00e3o: " + g);
		
	if (g == null) throw e; // se o conjunto \u00e9 null, propaga a exce\u00e7\u00e3o 
	
	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se n\u00e3o chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    janela.setConsole("     Encontrado token de sincroniza\u00e7\u00e3o: " + 
	                       im(tok.kind));
	    break;
	  }
	  janela.setConsole("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega pr\u00f3ximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
      janela.MarcaLinhaErro(linha);
	  janela.setConsole(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }
}

PARSER_END(BeerCompiler)

SKIP :
{
  " " | "\r" | "\t" | "\n"
}

TOKEN :
{
  < INICIOPROGRAMA: 		"geladeiraAberta" 												>
| < FIMPROGRAMA:			"geladeiraVazia" 												>
| < INICIOBLOCO:			"{" 															>
| < FIMBLOCO: 				"}"																>
| < PONTOVIRGULA:			";" 															>
| < INTEIRO: 				"pilsen" 														>
| < REAL: 					"malzbier" 														>
| < BOOLEAN:				"lager" 														>
| < CHAR: 					"ipa" 															>
| < STRING:					"helles"														>
| < ATRIBUICAO:				"=" 												     		>
| < SEPARADOR:				"," 															>
| < IF:						"garrafa" 														> 
| < ELSE:					"lata" 															>
| < PARESQ: 				"(" 															>
| < ISTRING:				"'" 															>
| < PARDIR:					")" 															>
| < CASADECIMAL:			"." 															>
| < OPERADOR_ARITMETICO: 	"+" | "-" | "*" | "/" 											>
| < OPERADOR_LOGICO:		">" | "<" | "<=" | ">=" | "<>" | "==" | "&" | "|" | "++" | "--"	> 
| < FOR:					"rodizio" 														>
| < IN:						"in" 															> 
| < WHILE:					"rodada"														>
| < FUNC:					"chop_"(<CARACTERE>|<DIGITO>)*									>
| < VERDADEIRO:				"cervejaGelada" 												>
| < FALSO:					"cervejaQuente" 												>
| < INTERRUPCAO:			"chegaPorHoje"													>
| < ID:						<CARACTERE>(["_"]|<CARACTERE >|<DIGITO>)*                       >
| < DIGITO:					["0"-"9"] 														>
| < CARACTERE:				(["A"-"Z"] | ["a"-"z"]) 										>
}

/* Substituido pelas duas funcoes abaixo:
SimpleNode main():
{ RecoverySet sync= Follow.main; }
{
  try { 
  inicioPrograma() inicioBloco()
  
    (comandos())*
  
  fimBloco() fimPrograma()

  } catch(ParseException e) {
    consumeUntil(sync,e,"main");
  }
  {return jjtThis; }
}
*/

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  main()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

int main() :
{/*@bgen(jjtree) main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  RecoverySet g = Follow.main;
}
{/*@bgen(jjtree) main */
  try {
/*@egen*/
  try
  {
    inicioPrograma() inicioBloco() (comandos())* fimBloco() fimPrograma()
  }
  catch (ParseException e)
  {
    consumeUntil(g, e, "main");
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return 0;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void comandos():
{/*@bgen(jjtree) comandos */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMANDOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.comandos; }
{/*@bgen(jjtree) comandos */
    try {
/*@egen*/
    try {
          declaracaoVariavel()
      |   condicional()  
      |   repeticao()
      |   funcao()
      |   operacao()
      
    }catch(ParseException e) {
    consumeUntil(sync,e,"comandos");
  }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void condicional():
{/*@bgen(jjtree) condicional */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.condicional; }
{/*@bgen(jjtree) condicional */
  try {
/*@egen*/
  try {

      condicionalIf() paresq() expressao() pardir() inicioBloco() (comandos())* fimBloco() (condicionalElse() inicioBloco() (comandos())* fimBloco())?
      
    }catch(ParseException e) {
    consumeUntil(sync,e,"condicional");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void repeticao():
{/*@bgen(jjtree) repeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.repeticao; }
{/*@bgen(jjtree) repeticao */
  try {
/*@egen*/
  //(<FOR> <PARESQ> <ID> <IN> <ID> <PARDIR> <INICIOBLOCO>(comandos())*<FIMBLOCO>)

  try {

    (repFor() paresq()
      id() (atribuicao() digito()(digito())*)* pontoVirgula() 
      id() operadorLogico() (id()|digito()(digito())*) pontoVirgula()
      id() atribuicao() id() operadorAritmetico() (id() | digito() (digito())*) pardir()
      inicioBloco() (comandos())* fimBloco())
    | (repWhile() paresq()(expressao()) pardir() inicioBloco() (comandos())* fimBloco())

    }catch(ParseException e) {
    consumeUntil(sync,e,"repeticao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}

void funcao():
{/*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.funcao; }
{/*@bgen(jjtree) funcao */
  try {
/*@egen*/
  try {
    
    func() paresq() ((id() | dado()) (separador() (id() | dado()))+) pardir() pontoVirgula()
    
    }catch(ParseException e) {
    consumeUntil(sync,e,"funcao"); 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
  }

void operacao():
{/*@bgen(jjtree) operacao */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.operacao; }
{/*@bgen(jjtree) operacao */
  try {
/*@egen*/
  try {

    id() atribuicao() expressao() pontoVirgula()
    
  }catch(ParseException e) {
    consumeUntil(sync,e,"operacao");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expressao():
{/*@bgen(jjtree) expressao */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.expressao; }
{/*@bgen(jjtree) expressao */
    try {
/*@egen*/
    try {

    (id() | dado()) ((operadorLogico()|operadorAritmetico()) (id() | dado()))*
    |   paresq() expressao () pardir()
    
    }catch(ParseException e) {
    consumeUntil(sync,e,"expressao");
  }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void declaracaoVariavel():
{/*@bgen(jjtree) declaracaoVariavel */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.declaracaoVariavel; }
{/*@bgen(jjtree) declaracaoVariavel */
    try {
/*@egen*/
    try {
      
    tipoDado() id() (atribuicao() dado())? (separador() (atribuicao() dado()))* pontoVirgula()

    }catch(ParseException e) {
    consumeUntil(sync,e,"declaracaoVariavel");
  }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void tipoDado():
{/*@bgen(jjtree) tipoDado */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.tipoDado; }
{/*@bgen(jjtree) tipoDado */
    try {
/*@egen*/
    try {
      
    	tipoInteiro() | tipoReal() | tipoChar() | tipoString() | tipoBooleano()

    }catch(ParseException e) {
    consumeUntil(sync,e,"tipoDado");
  }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  
}

void dado():
{/*@bgen(jjtree) dado */
  SimpleNode jjtn000 = new SimpleNode(JJTDADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.dado; }
{/*@bgen(jjtree) dado */
    try {
/*@egen*/
    try {

        numero() | string() | booleano()
      
    }catch(ParseException e) {
    consumeUntil(sync,e,"dado");
  }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void numero():
{/*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.numero; }
{/*@bgen(jjtree) numero */
   try {
/*@egen*/
   try {

        (digito())+ (casaDecimal() (digito())+ )?
      
    }catch(ParseException e) {
    consumeUntil(sync,e,"numero");
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
  
}

void string():
{/*@bgen(jjtree) string */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.string; }
{/*@bgen(jjtree) string */
   try {
/*@egen*/
   try {

        (istring())(caractere() | digito())*(istring())
      
    }catch(ParseException e) {
    consumeUntil(sync,e,"string");
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
  
}

void booleano():
{/*@bgen(jjtree) booleano */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet sync= Follow.booleano; }
{/*@bgen(jjtree) booleano */
   try {
/*@egen*/
   try {

        verdadeiro() | falso()
      
    }catch(ParseException e) {
    consumeUntil(sync,e,"booleano");
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
  
}

void inicioPrograma() :
{/*@bgen(jjtree) inicioPrograma */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) inicioPrograma */
  try {
/*@egen*/
  < INICIOPROGRAMA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fimPrograma() :
{/*@bgen(jjtree) fimPrograma */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fimPrograma */
  try {
/*@egen*/
  < FIMPROGRAMA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void inicioBloco() :
{/*@bgen(jjtree) inicioBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) inicioBloco */
  try {
/*@egen*/
  < INICIOBLOCO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fimBloco() :
{/*@bgen(jjtree) fimBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fimBloco */
  try {
/*@egen*/
  < FIMBLOCO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pontoVirgula() :
{/*@bgen(jjtree) pontoVirgula */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTOVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pontoVirgula */
  try {
/*@egen*/
  < PONTOVIRGULA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoBooleano() :
{/*@bgen(jjtree) tipoBooleano */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOLEANO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoBooleano */
  try {
/*@egen*/
  < BOOLEAN >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoInteiro() :
{/*@bgen(jjtree) tipoInteiro */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOINTEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoInteiro */
  try {
/*@egen*/
  < INTEIRO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoReal() :
{/*@bgen(jjtree) tipoReal */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOREAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoReal */
  try {
/*@egen*/
  < REAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipoChar() :
{/*@bgen(jjtree) tipoChar */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoChar */
  try {
/*@egen*/
  < CHAR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void tipoString() :
{/*@bgen(jjtree) tipoString */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoString */
  try {
/*@egen*/
  < STRING >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void atribuicao() :
{/*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) atribuicao */
  try {
/*@egen*/
  < ATRIBUICAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void separador() :
{/*@bgen(jjtree) separador */
  SimpleNode jjtn000 = new SimpleNode(JJTSEPARADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) separador */
  try {
/*@egen*/
  < SEPARADOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void condicionalIf() :
{/*@bgen(jjtree) condicionalIf */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONALIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condicionalIf */
  try {
/*@egen*/
  < IF >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void condicionalElse() :
{/*@bgen(jjtree) condicionalElse */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONALELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condicionalElse */
  try {
/*@egen*/
  < ELSE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void paresq() :
{/*@bgen(jjtree) paresq */
  SimpleNode jjtn000 = new SimpleNode(JJTPARESQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) paresq */
  try {
/*@egen*/
  < PARESQ >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pardir() :
{/*@bgen(jjtree) pardir */
  SimpleNode jjtn000 = new SimpleNode(JJTPARDIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pardir */
  try {
/*@egen*/
  < PARDIR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void istring() :
{/*@bgen(jjtree) istring */
  SimpleNode jjtn000 = new SimpleNode(JJTISTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) istring */
  try {
/*@egen*/
  < ISTRING >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}                               

void casaDecimal() :
{/*@bgen(jjtree) casaDecimal */
  SimpleNode jjtn000 = new SimpleNode(JJTCASADECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) casaDecimal */
  try {
/*@egen*/
  < CASADECIMAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operadorAritmetico() :
{/*@bgen(jjtree) operadorAritmetico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORARITMETICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operadorAritmetico */
  try {
/*@egen*/
  < OPERADOR_ARITMETICO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operadorLogico() :
{/*@bgen(jjtree) operadorLogico */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operadorLogico */
  try {
/*@egen*/
  < OPERADOR_LOGICO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void repFor() :
{/*@bgen(jjtree) repFor */
  SimpleNode jjtn000 = new SimpleNode(JJTREPFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repFor */
  try {
/*@egen*/
  < FOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
                          
void repWhile() :
{/*@bgen(jjtree) repWhile */
  SimpleNode jjtn000 = new SimpleNode(JJTREPWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repWhile */
  try {
/*@egen*/
  < WHILE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void func() :
{/*@bgen(jjtree) func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) func */
  try {
/*@egen*/
  < FUNC >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void verdadeiro() :
{/*@bgen(jjtree) verdadeiro */
  SimpleNode jjtn000 = new SimpleNode(JJTVERDADEIRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) verdadeiro */
  try {
/*@egen*/
  < VERDADEIRO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void falso() :
{/*@bgen(jjtree) falso */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) falso */
  try {
/*@egen*/
  < FALSO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void interrupcao() :
{/*@bgen(jjtree) interrupcao */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERRUPCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interrupcao */
  try {
/*@egen*/
  < INTERRUPCAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void id() :
{/*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) id */
  try {
/*@egen*/
  < ID >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void digito() :
{/*@bgen(jjtree) digito */
  SimpleNode jjtn000 = new SimpleNode(JJTDIGITO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) digito */
  try {
/*@egen*/
  < DIGITO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void caractere() :
{/*@bgen(jjtree) caractere */
  SimpleNode jjtn000 = new SimpleNode(JJTCARACTERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) caractere */
  try {
/*@egen*/
  < CARACTERE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}