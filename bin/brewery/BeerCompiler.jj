options
{
	LOOKAHEAD = 2;
  static = true;
}

PARSER_BEGIN(BeerCompiler)
package brewery;

public class BeerCompiler
{
  public static void main(String args []) throws ParseException
  {
    BeerCompiler parser = new BeerCompiler(System.in);
    System.out.println("A cervejaria esta aberta!");
    while (true)
    {
      System.out.println("Vamos beber:");
      try
      {
        parser.main();
      }
      catch (Exception e)
      {
        System.out.println("\n");
        System.out.println(e.getMessage());
        BeerCompiler.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Parando de beber...");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(BeerCompiler)

SKIP :
{
  " " | "\r" | "\t" | "\n"
}

TOKEN :
{
  < INICIOPROGRAMA: 		"geladeiraAberta" 					>
| < FIMPROGRAMA:			"geladeiraVazia" 					>
| < INICIOBLOCO:			"{" 								>
| < FIMBLOCO: 				"}"									>
| < PONTOVIRGULA:			";" 								>
| < INTEIRO: 				"pilsen" 							>
| < REAL: 					"malzbier" 							>
| < BOOLEAN:				"lager" 							>
| < CHAR: 					"ipa" 								>
| < STRING:					"helles"							>
| < ID:						"breja_"(<CARACTERE>|<DIGITO>)*		>
| < DIGITO:					["0"-"9"] 							>
| < CARACTERE:				(["A"-"Z"] | ["a"-"z"]) 			>
| < ATRIBUICAO:				"=" 								>
| < SEPARADOR:				"," 								>
| < IF:						"garrafa" 							> 
| < ELSE:					"lata" 								>
| < PARESQ: 				"(" 								>
| < ISTRING:				"'" 								>
| < PARDIR:					")" 								>
| < CASADECIMAL:			"." 								>
| < OPERADOR_ARITMETICO: 	"+" | "-" | "*" | "/" 				> 
| < FOR:					"rodizio" 							> 
| < FUNC:					"chop_"(<CARACTERE>|<DIGITO>)*		>
| < WHILE:					"rodada"							>
| < INTERRUPCAO:			"chegaPorHoje"						>
| < TRUE:					"cervejaGelada" 					>
| < FALSE:					"cervejaQuente" 					>
}

TOKEN : /*OPERADORES*/
{
	< MAIOR: 		">" 	>
|	< MENOR: 		"<" 	>
|	< MENOR_IGUAL: 	"<=" 	>
|	< MAIOR_IGUAL: 	">=" 	>
|	< DIFERENTE: 	"<>" 	>
| 	< IGUAL:		"==" 	>
| 	< AND:			"&"		>
| 	< OR:			"|"		>
| 	< INCREMENTO: 	"++"	>
| 	< DECREMENTO:	"--"	>
}

void main():
{}
{
<INICIOPROGRAMA> <INICIOBLOCO>

(comandos())*

<FIMBLOCO> <FIMPROGRAMA>
}

void comandos():
{ }
{
	declaracaoVariavel()
|   condicional()  
| 	repeticao()
| 	function()
| 	expressao()
| 	operacao()
}

void declaracaoVariavel():
{ }
{
	 	<REAL> 		<ID> (<ATRIBUICAO> ( numero() ))? 		(<SEPARADOR> <ID> (<ATRIBUICAO> ( numero()) )?)* 	<PONTOVIRGULA>
| 		<INTEIRO> 	<ID> (<ATRIBUICAO> ( <DIGITO> )*)? 		(<SEPARADOR> <ID> (<ATRIBUICAO> ( <DIGITO> )*)?)* 	<PONTOVIRGULA>
| 		<CHAR> 		<ID> (<ATRIBUICAO> ( <CARACTERE> ))? 	(<SEPARADOR> <ID> (<ATRIBUICAO> ( <CARACTERE>))?)* 	<PONTOVIRGULA>
| 		<STRING> 	<ID> (<ATRIBUICAO> ( string() ))? 		(<SEPARADOR> <ID> (<ATRIBUICAO> ( string()))?)* 	<PONTOVIRGULA>
| 		<BOOLEAN> 	<ID> (<ATRIBUICAO> ( bool() ))? 		(<SEPARADOR> <ID> (<ATRIBUICAO> bool())?)* 			<PONTOVIRGULA>
}

void numero():
{ }
{
	(<DIGITO>)+ (<CASADECIMAL> (<DIGITO>)+ )?
}

void expressao():
{ }
{
  ((numero() | <ID>) (<MAIOR>|<MENOR>|<MENOR_IGUAL>|<MAIOR_IGUAL>|<DIFERENTE>|<IGUAL>|<AND>|<OR>|<OPERADOR_ARITMETICO>) (numero() | <ID>))
}

void condicional():
{ }
{
	<IF> <PARESQ> expressao() <PARDIR> <INICIOBLOCO> (comandos())* <FIMBLOCO>
	(<ELSE><INICIOBLOCO> (comandos())* <FIMBLOCO>)?
}

void repeticao():
{ }
{
	(<FOR> <PARESQ> ((<ID> <ATRIBUICAO> numero() <PONTOVIRGULA>) (<ID> (<MENOR>|<MAIOR>|<MENOR_IGUAL>|<MAIOR_IGUAL>)
		numero() <PONTOVIRGULA>)(<ID> (<INCREMENTO>|<DECREMENTO>))) <PARDIR> (<INICIOBLOCO>(comandos())* <FIMBLOCO>)?)
|	(<WHILE> <PARESQ> (expressao())? <PARDIR><INICIOBLOCO> (comandos())*<FIMBLOCO>)
}

void function():
{}
{
  <FUNC> <PARESQ> ((<ID> | dado()) (<SEPARADOR> (<ID> | dado()))+) <PARDIR> <PONTOVIRGULA>
}

void string():
{ }
{
	(<ISTRING>)(<CARACTERE> | <DIGITO>)*(<ISTRING>)
}

void bool():
{ }
{
	<TRUE> | <FALSE>
}

void dado():
{ }
{
	numero() | string() | bool()
}

void operacao():
{}
{
	<ID> <ATRIBUICAO> ( <ID> | numero()) <PONTOVIRGULA>
|   <ID> <ATRIBUICAO> ( <ID> | numero()) <OPERADOR_ARITMETICO> ( <ID> | numero())<PONTOVIRGULA>
|   <ID> <ATRIBUICAO> <PARESQ> ( <ID> | numero()) <OPERADOR_ARITMETICO> ( <ID> | numero()) <PARDIR> <PONTOVIRGULA>
}
