PARSER_BEGIN(BeerCompiler)
package parser;
import recovery.*;

public class BeerCompiler
{
  public static void main(String args []) throws ParseException
  {
    BeerCompiler parser = new BeerCompiler(System.in);
    System.out.println("A cervejaria esta aberta!");
    while (true)
    {
      System.out.println("Vamos beber:");
      try
      {
        parser.main();
      }
      catch (Exception e)
      {
        System.out.println("\n");
        System.out.println(e.getMessage());
        BeerCompiler.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Parando de beber...");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
  
  static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado
	
  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met) throws ParseEOFException,
	                                    ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("*** " + met + " ***");
	System.out.println("     Conjunto de sincronização: " + g);
		
	if (g == null) throw e; // se o conjunto é null, propaga a exceção 
	
	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se não chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincronização: " + 
	                       im(tok.kind));
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega próximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde não deveria.");
  }
}

PARSER_END(BeerCompiler)

SKIP :
{
  " " | "\r" | "\t" | "\n"
}

TOKEN :
{
  < INICIOPROGRAMA: 		"geladeiraAberta" 												>
| < FIMPROGRAMA:			"geladeiraVazia" 												>
| < INICIOBLOCO:			"{" 															>
| < FIMBLOCO: 				"}"																>
| < PONTOVIRGULA:			";" 															>
| < INTEIRO: 				"pilsen" 														>
| < REAL: 					"malzbier" 														>
| < BOOLEAN:				"lager" 														>
| < CHAR: 					"ipa" 															>
| < STRING:					"helles"														>
| < ATRIBUICAO:				"=" 												     		>
| < SEPARADOR:				"," 															>
| < IF:						"garrafa" 														> 
| < ELSE:					"lata" 															>
| < PARESQ: 				"(" 															>
| < ISTRING:				"'" 															>
| < PARDIR:					")" 															>
| < CASADECIMAL:			"." 															>
| < OPERADOR_ARITMETICO: 	"+" | "-" | "*" | "/" 											>
| < OPERADOR_LOGICO:		">" | "<" | "<=" | ">=" | "<>" | "==" | "&" | "|" | "++" | "--"	> 
| < FOR:					"rodizio" 														>
| < IN:						"in" 															> 
| < WHILE:					"rodada"														>
| < FUNC:					"chop_"(<CARACTERE>|<DIGITO>)*									>
| < VERDADEIRO:				"cervejaGelada" 												>
| < FALSO:					"cervejaQuente" 												>
| < INTERRUPCAO:			"chegaPorHoje"													>
| < ID:						<CARACTERE>(["_"]|<CARACTERE >|<DIGITO>)*                       >
| < DIGITO:					["0"-"9"] 														>
| < CARACTERE:				(["A"-"Z"] | ["a"-"z"]) 										>
}

void main():
{}
{
<INICIOPROGRAMA> <INICIOBLOCO>

	(comandos())*

<FIMBLOCO> <FIMPROGRAMA> 
}

void comandos():
{ }
{
	declaracaoVariavel()
|   condicional()  
| 	repeticao()
| 	funcao()
| 	operacao()
}

void condicional():
{ }
{
	<IF> <PARESQ> expressao() <PARDIR> <INICIOBLOCO> (comandos())* <FIMBLOCO> (<ELSE><INICIOBLOCO> (comandos())* <FIMBLOCO>)?
}

void repeticao():
{ }
{
	//(<FOR> <PARESQ> <ID> <IN> <ID> <PARDIR> <INICIOBLOCO>(comandos())*<FIMBLOCO>)
	(<FOR> <PARESQ>
		<ID > (< ATRIBUICAO > <DIGITO >(< DIGITO >)*)* < PONTOVIRGULA > 
		<ID > <OPERADOR_LOGICO > (<ID >|<DIGITO >(< DIGITO >)*) < PONTOVIRGULA >
		<ID > < ATRIBUICAO > <ID > <OPERADOR_ARITMETICO > (<ID >|<DIGITO>(< DIGITO >)*) <PARDIR>
		<INICIOBLOCO>(comandos())*<FIMBLOCO>)
|	(<WHILE> <PARESQ>(expressao()) <PARDIR> <INICIOBLOCO>(comandos())*<FIMBLOCO>)
}

void funcao():
{}
{
	<FUNC> <PARESQ> ((<ID> | dado()) (<SEPARADOR> (<ID> | dado()))+) <PARDIR> <PONTOVIRGULA>
}

void operacao():
{ }
{
	<ID> <ATRIBUICAO> expressao() <PONTOVIRGULA> 
}

void expressao():
{ }
{
	(<ID> | dado()) ((<OPERADOR_LOGICO>|<OPERADOR_ARITMETICO>) (<ID> | dado()))*
| 	<PARESQ> expressao () <PARDIR>
}

void declaracaoVariavel():
{ }
{
	tipoDado() <ID> (<ATRIBUICAO> dado())? (<SEPARADOR> (<ATRIBUICAO> dado()))* <PONTOVIRGULA>
}

void tipoDado():
{}
{
	<INTEIRO> | <REAL> | <CHAR> | <STRING> | <BOOLEAN>
}

void dado():
{ }
{
	numero() | string() | booleano()
}

void numero():
{ }
{
	(<DIGITO>)+ (<CASADECIMAL> (<DIGITO>)+ )?
}

void string():
{ }
{
	(<ISTRING>)(<CARACTERE> | <DIGITO>)*(<ISTRING>)
}

void booleano():
{ }
{
	<VERDADEIRO> | <FALSO>
}