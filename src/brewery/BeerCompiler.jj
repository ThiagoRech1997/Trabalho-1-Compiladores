options{  static = true;}PARSER_BEGIN(BeerCompiler)package brewery;

public class BeerCompiler{  public static void main(String args []) throws ParseException  {    BeerCompiler parser = new BeerCompiler(System.in);    while (true)    {      System.out.println("A cervejaria esta aberta:");      try      {        parser.main();      }      catch (Exception e)      {        System.out.println("Vamos beber:");        System.out.println(e.getMessage());        BeerCompiler.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Parando de beber...");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(BeerCompiler)SKIP :{  " "| "\r"| "\t"| "\n"| "//"}TOKEN : /* OPERATORS */{
  < INICIOPROGRAMA: 		"geladeiraAberta" 					>
| < FIMPROGRAMA:			"geladeiraVazia" 					>
| < INICIOBLOCO:			"{" 								>
| < FIMBLOCO: 				"}"									>
| < PONTOVIRGULA:			";" 								>
| < INTEIRO: 				"pilsen" 							>
| < REAL: 					"malzbier" 							>
| < BOOLEAN:				"lager" 							>
| < LETRA: 					"ipa" 								>
| < STRING:					"helles"							>| < DECIMAL:				(< DIGITO >)+ 						>| < ID:						"breja_"(<CARACTERE>|<DIGITO>)*		>
| < DIGITO:					["0"-"9"] 							>
| < CARACTERE:				(["A"-"Z"] | ["a"-"z"]) 			>
| < ATRIBUICAO:				"=" 								>
| < SEPARADOR:				"," 								>
| < IF:						"garrafa" 							> 
| < ELSE:					"lata" 								>
| < PARESQ: 				"(" 								>
| < ISTRING:				"'" 								>
| < PARDIR:					")" 								>
| < CASADECIMAL:			"." 								> 
| < OPERADOR_LOGICO: 		"<" | ">" | "==" | "&" | "|" 		>
| < OPERADOR_ARITMETICO: 	"+" | "-" | "*" | "/" 				> 
| < FOR:					"rodizio" 							> 
| < FUNC:					"chop_"(<CARACTERE>|<DIGITO>)*		>
| < WHILE:					"rodada"							>
| < INTERRUPCAO:			"chegaPorHoje"						>
| < TRUE:					"cervejaGelada" 					> 
| < FALSE:					"cervejaQuente" 					> }

void main():
{}
{
<INICIOPROGRAMA> <INICIOBLOCO>

(comandos())*

<FIMBLOCO> <FIMPROGRAMA>
}
void comandos():
{ }
{
	declaracaoVariavel()
|   condicional()  
| 	repeticao()
| 	function() 
}

void declaracaoVariavel():
{ }
{
	tipoDado() <ID> (<ATRIBUICAO> ( <CARACTERE>| numero() ) )? (<SEPARADOR> <ID> (<ATRIBUICAO> ( <CARACTERE>| numero()) )?)* <PONTOVIRGULA>
}

void tipoDado():
{ }
{
	<REAL> | <INTEIRO> | <LETRA> | <STRING> | <BOOLEAN> 	
}

void numero():
{ }
{
	(<DIGITO>)+ (<CASADECIMAL> (<DIGITO>)+ )?
}

void expressao():
{ }
{
  ((numero() | <ID>) (<OPERADOR_LOGICO> | <OPERADOR_ARITMETICO>) (numero() | <ID>))
}

void condicional():
{ }
{
	<IF> <PARESQ> expressao() <PARDIR> <INICIOBLOCO> (bool() | declaracaoVariavel() | repeticao())* <FIMBLOCO>(<ELSE><INICIOBLOCO> (declaracaoVariavel() | repeticao())* <FIMBLOCO>)?
}

void repeticao():
{ }
{
	(<FOR> <PARESQ> (numero()|<ID>) <PARDIR> (<INICIOBLOCO>(comandos())* <FIMBLOCO>)?)
|	(<WHILE> <PARESQ> (expressao())? <PARDIR> <INICIOBLOCO> (comandos())*<FIMBLOCO>)
}

void function():
{}
{
  <FUNC> <PARESQ> ((<ID> | dado()) (<SEPARADOR> (<ID> | dado()))+) <PARDIR> <PONTOVIRGULA>
}

void espressao():
{ }
{
 	((numero() | <ID>) (<OPERADOR_LOGICO> | <OPERADOR_ARITMETICO>) (numero() | <ID>))
}

void string():
{ }
{
	(<ISTRING>)(<CARACTERE> | <DIGITO>)*(<ISTRING>)
}

void bool():
{ }
{
	<TRUE> | <FALSE>
}

void dado():
{ }
{
	numero() | string() | bool()
}